#!/usr/bin/env php
<?php

require __DIR__.'/../tests/bootstrap.php';

use Composer\Composer;
use Composer\Installer;
use Composer\Downloader;
use Composer\Repository;
use Composer\Package;
use Composer\Json\JsonFile;
use Composer\Console\Application as ComposerApplication;

$vendorPath = 'vendor';

// initialize repository manager
$rm = new Repository\RepositoryManager();
$rm->setLocalRepository(new Repository\FilesystemRepository(new JsonFile($vendorPath.'/.composer/installed.json')));
$rm->setRepositoryClass('composer', 'Composer\Repository\ComposerRepository');
$rm->setRepositoryClass('vcs', 'Composer\Repository\VcsRepository');
$rm->setRepositoryClass('pear', 'Composer\Repository\PearRepository');
$rm->setRepositoryClass('package', 'Composer\Repository\PackageRepository');

// initialize download manager
$dm = new Downloader\DownloadManager();
$dm->setDownloader('git',  new Downloader\GitDownloader());
$dm->setDownloader('pear', new Downloader\PearDownloader());
$dm->setDownloader('zip',  new Downloader\ZipDownloader());

// initialize installation manager
$im = new Installer\InstallationManager();
$im->addInstaller(new Installer\LibraryInstaller($vendorPath, $dm, $rm->getLocalRepository()));
$im->addInstaller(new Installer\LibraryInstaller($vendorPath.'/bundles', $dm, $rm->getLocalRepository(), 'symfony-bundle'));

// load package
$loader  = new Package\Loader\ArrayLoader($rm);
$file = new JsonFile('composer.json');
if (!$file->exists()) {
    throw new \RuntimeException('The composer.json file could not be found in the current directory');
}
$packageConfig = $file->read();
$package = $loader->load($packageConfig);

// load default repository unless it's explicitly disabled
if (!isset($packageConfig['repositories']['packagist']) || $packageConfig['repositories']['packagist'] !== false) {
    $rm->addRepository(new Repository\ComposerRepository('http://packagist.org'));
}

// init locker
$locker = new Package\Locker(new JsonFile('composer.lock'), $rm);

// initialize composer
$composer = new Composer();
$composer->setPackage($package);
$composer->setLocker($locker);
$composer->setRepositoryManager($rm);
$composer->setDownloadManager($dm);
$composer->setInstallationManager($im);

// run the command application
$application = new ComposerApplication($composer);
$application->run();
